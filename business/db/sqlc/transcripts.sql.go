// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transcripts.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const deleteSubjectTranscripts = `-- name: DeleteSubjectTranscripts :exec
DELETE FROM transcripts WHERE subject_id = $1
`

func (q *Queries) DeleteSubjectTranscripts(ctx context.Context, subjectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubjectTranscripts, subjectID)
	return err
}

const getTranscriptIdsBySubjectId = `-- name: GetTranscriptIdsBySubjectId :many
SELECT id AS ids FROM transcripts
    WHERE subject_id = $1 ORDER BY index
`

func (q *Queries) GetTranscriptIdsBySubjectId(ctx context.Context, subjectID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getTranscriptIdsBySubjectId, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var ids uuid.UUID
		if err := rows.Scan(&ids); err != nil {
			return nil, err
		}
		items = append(items, ids)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTranscriptsBySubjectId = `-- name: GetTranscriptsBySubjectId :many
SELECT id, subject_id, name, index, min_grade, weight FROM transcripts WHERE subject_id = $1 ORDER BY index
`

func (q *Queries) GetTranscriptsBySubjectId(ctx context.Context, subjectID uuid.UUID) ([]Transcript, error) {
	rows, err := q.db.Query(ctx, getTranscriptsBySubjectId, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transcript
	for rows.Next() {
		var i Transcript
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.Name,
			&i.Index,
			&i.MinGrade,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertTranscriptsParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	SubjectID uuid.UUID `db:"subject_id" json:"subjectId"`
	Name      string    `db:"name" json:"name"`
	Index     int32     `db:"index" json:"index"`
	MinGrade  float64   `db:"min_grade" json:"minGrade"`
	Weight    float64   `db:"weight" json:"weight"`
}
