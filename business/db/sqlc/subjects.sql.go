// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subjects.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const insertSubject = `-- name: InsertSubject :exec
INSERT INTO subjects (id, name, code, description, image_link, status,
    time_per_session, sessions_per_week, created_by, updated_by,
    created_at, updated_at)
VALUES ($1::uuid, $2, $3, $4,
    $5, $6, $7,
    $8, $9, $10,
    $11, $12)
`

type InsertSubjectParams struct {
	ID              uuid.UUID      `db:"id" json:"id"`
	Name            string         `db:"name" json:"name"`
	Code            string         `db:"code" json:"code"`
	Description     string         `db:"description" json:"description"`
	ImageLink       string         `db:"image_link" json:"imageLink"`
	Status          sql.NullInt16  `db:"status" json:"status"`
	TimePerSession  int16          `db:"time_per_session" json:"timePerSession"`
	SessionsPerWeek int16          `db:"sessions_per_week" json:"sessionsPerWeek"`
	CreatedBy       string         `db:"created_by" json:"createdBy"`
	UpdatedBy       sql.NullString `db:"updated_by" json:"updatedBy"`
	CreatedAt       sql.NullTime   `db:"created_at" json:"createdAt"`
	UpdatedAt       sql.NullTime   `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) InsertSubject(ctx context.Context, arg InsertSubjectParams) error {
	_, err := q.db.ExecContext(ctx, insertSubject,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.ImageLink,
		arg.Status,
		arg.TimePerSession,
		arg.SessionsPerWeek,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
