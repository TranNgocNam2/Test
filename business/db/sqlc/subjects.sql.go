// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subjects.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteSubject = `-- name: DeleteSubject :exec
UPDATE subjects SET status = 2, updated_at = NOW(), updated_by = $1
WHERE id = $2
`

type DeleteSubjectParams struct {
	UpdatedBy *string   `db:"updated_by" json:"updatedBy"`
	ID        uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) DeleteSubject(ctx context.Context, arg DeleteSubjectParams) error {
	_, err := q.db.Exec(ctx, deleteSubject, arg.UpdatedBy, arg.ID)
	return err
}

const deleteSubjectSkills = `-- name: DeleteSubjectSkills :exec
DELETE FROM subject_skills WHERE subject_id = $1
`

func (q *Queries) DeleteSubjectSkills(ctx context.Context, subjectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubjectSkills, subjectID)
	return err
}

const getPublishedSubjectById = `-- name: GetPublishedSubjectById :one
SELECT id, code, name, time_per_session, min_pass_grade, min_attendance, image_link, status, description, created_by, updated_by, created_at, updated_at, learner_type
FROM subjects
WHERE id = $1::uuid AND status = 1
`

func (q *Queries) GetPublishedSubjectById(ctx context.Context, id uuid.UUID) (Subject, error) {
	row := q.db.QueryRow(ctx, getPublishedSubjectById, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.TimePerSession,
		&i.MinPassGrade,
		&i.MinAttendance,
		&i.ImageLink,
		&i.Status,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LearnerType,
	)
	return i, err
}

const getSubjectById = `-- name: GetSubjectById :one
SELECT id, code, name, time_per_session, min_pass_grade, min_attendance, image_link, status, description, created_by, updated_by, created_at, updated_at, learner_type
FROM subjects WHERE id = $1::uuid
`

func (q *Queries) GetSubjectById(ctx context.Context, id uuid.UUID) (Subject, error) {
	row := q.db.QueryRow(ctx, getSubjectById, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.TimePerSession,
		&i.MinPassGrade,
		&i.MinAttendance,
		&i.ImageLink,
		&i.Status,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LearnerType,
	)
	return i, err
}

const getSubjectsByIds = `-- name: GetSubjectsByIds :many
SELECT id, code, name, time_per_session, min_pass_grade, min_attendance, image_link, status, description, created_by, updated_by, created_at, updated_at, learner_type
FROM subjects
WHERE id = ANY($1::uuid[]) AND status = 1
`

func (q *Queries) GetSubjectsByIds(ctx context.Context, subjectIds []uuid.UUID) ([]Subject, error) {
	rows, err := q.db.Query(ctx, getSubjectsByIds, subjectIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.TimePerSession,
			&i.MinPassGrade,
			&i.MinAttendance,
			&i.ImageLink,
			&i.Status,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LearnerType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSubject = `-- name: InsertSubject :one
INSERT INTO subjects (id, name, code, description, image_link, status,
    time_per_session, created_by, created_at, learner_type)
VALUES ($1::uuid, $2, $3, $4,
    $5, $6, $7,
    $8, $9, $10)
RETURNING id
`

type InsertSubjectParams struct {
	ID             uuid.UUID `db:"id" json:"id"`
	Name           string    `db:"name" json:"name"`
	Code           string    `db:"code" json:"code"`
	Description    *string   `db:"description" json:"description"`
	ImageLink      *string   `db:"image_link" json:"imageLink"`
	Status         int16     `db:"status" json:"status"`
	TimePerSession int16     `db:"time_per_session" json:"timePerSession"`
	CreatedBy      string    `db:"created_by" json:"createdBy"`
	CreatedAt      time.Time `db:"created_at" json:"createdAt"`
	LearnerType    *int16    `db:"learner_type" json:"learnerType"`
}

func (q *Queries) InsertSubject(ctx context.Context, arg InsertSubjectParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertSubject,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.ImageLink,
		arg.Status,
		arg.TimePerSession,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.LearnerType,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const isSubjectCodeExist = `-- name: IsSubjectCodeExist :one
SELECT id, code, name, time_per_session, min_pass_grade, min_attendance, image_link, status, description, created_by, updated_by, created_at, updated_at, learner_type
FROM subjects
WHERE code = $1 AND status = 1
`

func (q *Queries) IsSubjectCodeExist(ctx context.Context, code string) (Subject, error) {
	row := q.db.QueryRow(ctx, isSubjectCodeExist, code)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.TimePerSession,
		&i.MinPassGrade,
		&i.MinAttendance,
		&i.ImageLink,
		&i.Status,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LearnerType,
	)
	return i, err
}

const isSubjectCodePublished = `-- name: IsSubjectCodePublished :one
SELECT id, code, name, time_per_session, min_pass_grade, min_attendance, image_link, status, description, created_by, updated_by, created_at, updated_at, learner_type
FROM subjects
WHERE code = $1 AND status = 1 AND id != $2
`

type IsSubjectCodePublishedParams struct {
	Code string    `db:"code" json:"code"`
	ID   uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) IsSubjectCodePublished(ctx context.Context, arg IsSubjectCodePublishedParams) (Subject, error) {
	row := q.db.QueryRow(ctx, isSubjectCodePublished, arg.Code, arg.ID)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.TimePerSession,
		&i.MinPassGrade,
		&i.MinAttendance,
		&i.ImageLink,
		&i.Status,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LearnerType,
	)
	return i, err
}

const updateSubject = `-- name: UpdateSubject :exec
UPDATE subjects
SET name = $1,
    code = $2,
    time_per_session = $3,
    min_pass_grade = $4,
    min_attendance = $5,
    description = $6,
    status = $7,
    image_link = $8,
    updated_by = $9,
    updated_at = $10,
    learner_type = $11
WHERE id = $12::uuid
`

type UpdateSubjectParams struct {
	Name           string     `db:"name" json:"name"`
	Code           string     `db:"code" json:"code"`
	TimePerSession int16      `db:"time_per_session" json:"timePerSession"`
	MinPassGrade   *float32   `db:"min_pass_grade" json:"minPassGrade"`
	MinAttendance  *float32   `db:"min_attendance" json:"minAttendance"`
	Description    *string    `db:"description" json:"description"`
	Status         int16      `db:"status" json:"status"`
	ImageLink      *string    `db:"image_link" json:"imageLink"`
	UpdatedBy      *string    `db:"updated_by" json:"updatedBy"`
	UpdatedAt      *time.Time `db:"updated_at" json:"updatedAt"`
	LearnerType    *int16     `db:"learner_type" json:"learnerType"`
	ID             uuid.UUID  `db:"id" json:"id"`
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) error {
	_, err := q.db.Exec(ctx, updateSubject,
		arg.Name,
		arg.Code,
		arg.TimePerSession,
		arg.MinPassGrade,
		arg.MinAttendance,
		arg.Description,
		arg.Status,
		arg.ImageLink,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.LearnerType,
		arg.ID,
	)
	return err
}
