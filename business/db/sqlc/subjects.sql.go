// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subjects.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteSubjectSkills = `-- name: DeleteSubjectSkills :exec
DELETE FROM subject_skills WHERE subject_id = $1
`

func (q *Queries) DeleteSubjectSkills(ctx context.Context, subjectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubjectSkills, subjectID)
	return err
}

const getSubjectByCode = `-- name: GetSubjectByCode :one
SELECT id, code, name, time_per_session, sessions_per_week, image_link, status, description, created_by, updated_by, created_at, updated_at
FROM subjects
WHERE code = $1
`

func (q *Queries) GetSubjectByCode(ctx context.Context, code string) (Subject, error) {
	row := q.db.QueryRow(ctx, getSubjectByCode, code)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.TimePerSession,
		&i.SessionsPerWeek,
		&i.ImageLink,
		&i.Status,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubjectById = `-- name: GetSubjectById :one
SELECT id, code, name, time_per_session, sessions_per_week, image_link, status, description, created_by, updated_by, created_at, updated_at
FROM subjects WHERE id = $1::uuid
`

func (q *Queries) GetSubjectById(ctx context.Context, id uuid.UUID) (Subject, error) {
	row := q.db.QueryRow(ctx, getSubjectById, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.TimePerSession,
		&i.SessionsPerWeek,
		&i.ImageLink,
		&i.Status,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubjectsByIDs = `-- name: GetSubjectsByIDs :many
SELECT id, code, name, time_per_session, sessions_per_week, image_link, status, description, created_by, updated_by, created_at, updated_at
FROM subjects
WHERE id = ANY($1::uuid[]) AND status = 1
`

func (q *Queries) GetSubjectsByIDs(ctx context.Context, subjectIds []uuid.UUID) ([]Subject, error) {
	rows, err := q.db.Query(ctx, getSubjectsByIDs, subjectIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.TimePerSession,
			&i.SessionsPerWeek,
			&i.ImageLink,
			&i.Status,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSubject = `-- name: InsertSubject :one
INSERT INTO subjects (id, name, code, description, image_link, status,
    time_per_session, sessions_per_week, created_by,
    created_at)
VALUES ($1::uuid, $2, $3, $4,
    $5, $6, $7,
    $8, $9,
    $10)
RETURNING id
`

type InsertSubjectParams struct {
	ID              uuid.UUID `db:"id" json:"id"`
	Name            string    `db:"name" json:"name"`
	Code            string    `db:"code" json:"code"`
	Description     string    `db:"description" json:"description"`
	ImageLink       string    `db:"image_link" json:"imageLink"`
	Status          int16     `db:"status" json:"status"`
	TimePerSession  int16     `db:"time_per_session" json:"timePerSession"`
	SessionsPerWeek int16     `db:"sessions_per_week" json:"sessionsPerWeek"`
	CreatedBy       string    `db:"created_by" json:"createdBy"`
	CreatedAt       time.Time `db:"created_at" json:"createdAt"`
}

func (q *Queries) InsertSubject(ctx context.Context, arg InsertSubjectParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertSubject,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.ImageLink,
		arg.Status,
		arg.TimePerSession,
		arg.SessionsPerWeek,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateSubject = `-- name: UpdateSubject :exec
UPDATE subjects
SET name = $1,
    code = $2,
    description = $3,
    status = $4,
    image_link = $5,
    updated_by = $6,
    updated_at = $7
WHERE id = $8::uuid
`

type UpdateSubjectParams struct {
	Name        string     `db:"name" json:"name"`
	Code        string     `db:"code" json:"code"`
	Description string     `db:"description" json:"description"`
	Status      int16      `db:"status" json:"status"`
	ImageLink   string     `db:"image_link" json:"imageLink"`
	UpdatedBy   *string    `db:"updated_by" json:"updatedBy"`
	UpdatedAt   *time.Time `db:"updated_at" json:"updatedAt"`
	ID          uuid.UUID  `db:"id" json:"id"`
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) error {
	_, err := q.db.Exec(ctx, updateSubject,
		arg.Name,
		arg.Code,
		arg.Description,
		arg.Status,
		arg.ImageLink,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
