// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: districts.sql

package sqlc

import (
	"context"
)

const getDistrictById = `-- name: GetDistrictById :one
SELECT id, name, province_id FROM districts
         WHERE districts.id = $1::integer
`

func (q *Queries) GetDistrictById(ctx context.Context, id int32) (District, error) {
	row := q.db.QueryRow(ctx, getDistrictById, id)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.ProvinceID)
	return i, err
}

const getDistrictsByProvince = `-- name: GetDistrictsByProvince :many
SELECT id, name, province_id FROM districts
         WHERE districts.province_id = $1::integer
         ORDER BY id
`

func (q *Queries) GetDistrictsByProvince(ctx context.Context, provinceID int32) ([]District, error) {
	rows, err := q.db.Query(ctx, getDistrictsByProvince, provinceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []District
	for rows.Next() {
		var i District
		if err := rows.Scan(&i.ID, &i.Name, &i.ProvinceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
