// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: provinces.sql

package sqlc

import (
	"context"
)

const getAllProvince = `-- name: GetAllProvince :many
SELECT id, name FROM provinces
         ORDER BY id
`

func (q *Queries) GetAllProvince(ctx context.Context) ([]Province, error) {
	rows, err := q.db.Query(ctx, getAllProvince)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Province
	for rows.Next() {
		var i Province
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvinceById = `-- name: GetProvinceById :one
SELECT id, name FROM provinces
         WHERE provinces.id = $1::integer
`

func (q *Queries) GetProvinceById(ctx context.Context, id int32) (Province, error) {
	row := q.db.QueryRow(ctx, getProvinceById, id)
	var i Province
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
