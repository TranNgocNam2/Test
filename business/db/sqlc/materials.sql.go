// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: materials.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const deleteSessionMaterials = `-- name: DeleteSessionMaterials :exec
DELETE FROM materials WHERE session_id = $1
`

func (q *Queries) DeleteSessionMaterials(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSessionMaterials, sessionID)
	return err
}

const getMaterialsBySessionId = `-- name: GetMaterialsBySessionId :many
SELECT id, session_id, index, type, data, is_shared, name from materials WHERE session_id = $1 ORDER BY index
`

func (q *Queries) GetMaterialsBySessionId(ctx context.Context, sessionID uuid.UUID) ([]Material, error) {
	rows, err := q.db.Query(ctx, getMaterialsBySessionId, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Material
	for rows.Next() {
		var i Material
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Index,
			&i.Type,
			&i.Data,
			&i.IsShared,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertMaterialParams struct {
	ID        uuid.UUID       `db:"id" json:"id"`
	SessionID uuid.UUID       `db:"session_id" json:"sessionId"`
	Index     int32           `db:"index" json:"index"`
	Type      string          `db:"type" json:"type"`
	IsShared  bool            `db:"is_shared" json:"isShared"`
	Name      *string         `db:"name" json:"name"`
	Data      json.RawMessage `db:"data" json:"data"`
}
