// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: specialization_skills.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSpecializationSkills = `-- name: CreateSpecializationSkills :exec
INSERT INTO specialization_skills (specialization_id, skill_id)
SELECT $1::uuid, unnest($2::uuid[])
`

type CreateSpecializationSkillsParams struct {
	SpecializationID uuid.UUID   `db:"specialization_id" json:"specializationId"`
	SkillIds         []uuid.UUID `db:"skill_ids" json:"skillIds"`
}

func (q *Queries) CreateSpecializationSkills(ctx context.Context, arg CreateSpecializationSkillsParams) error {
	_, err := q.db.Exec(ctx, createSpecializationSkills, arg.SpecializationID, arg.SkillIds)
	return err
}

const deleteSpecializationSkills = `-- name: DeleteSpecializationSkills :exec
DELETE FROM specialization_skills WHERE specialization_id = $1::uuid
`

func (q *Queries) DeleteSpecializationSkills(ctx context.Context, specializationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpecializationSkills, specializationID)
	return err
}

const getSkillsBySpecialization = `-- name: GetSkillsBySpecialization :many
SELECT skills.id, skills.name
FROM specialization_skills
JOIN skills ON specialization_skills.skill_id = skills.id
WHERE specialization_skills.specialization_id = $1::uuid
`

func (q *Queries) GetSkillsBySpecialization(ctx context.Context, specializationID uuid.UUID) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getSkillsBySpecialization, specializationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
