// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: classes.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createClass = `-- name: CreateClass :exec
INSERT INTO classes (id, code, password, name, link, program_subject_id,
                     start_date, end_date, created_by)
VALUES ($1::uuid, $2, $3,
        $4, $5, $6::uuid,
        $7, $8, $9)
`

type CreateClassParams struct {
	ID               uuid.UUID  `db:"id" json:"id"`
	Code             string     `db:"code" json:"code"`
	Password         string     `db:"password" json:"password"`
	Name             string     `db:"name" json:"name"`
	Link             *string    `db:"link" json:"link"`
	ProgramSubjectID uuid.UUID  `db:"program_subject_id" json:"programSubjectId"`
	StartDate        time.Time  `db:"start_date" json:"startDate"`
	EndDate          *time.Time `db:"end_date" json:"endDate"`
	CreatedBy        string     `db:"created_by" json:"createdBy"`
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) error {
	_, err := q.db.Exec(ctx, createClass,
		arg.ID,
		arg.Code,
		arg.Password,
		arg.Name,
		arg.Link,
		arg.ProgramSubjectID,
		arg.StartDate,
		arg.EndDate,
		arg.CreatedBy,
	)
	return err
}

const getClassByID = `-- name: GetClassByID :one
SELECT id, code, password, name, link, program_subject_id, start_date, end_date, created_by, created_at, updated_at, updated_by FROM classes WHERE id = $1::uuid
`

func (q *Queries) GetClassByID(ctx context.Context, id uuid.UUID) (Class, error) {
	row := q.db.QueryRow(ctx, getClassByID, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Password,
		&i.Name,
		&i.Link,
		&i.ProgramSubjectID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
