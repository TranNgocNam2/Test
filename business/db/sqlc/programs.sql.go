// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: programs.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProgram = `-- name: CreateProgram :exec
INSERT INTO programs (id, name, start_date, end_date, created_by, description)
VALUES ($1, $2, $3, $4,
        $5, $6)
`

type CreateProgramParams struct {
	ID          uuid.UUID `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	StartDate   time.Time `db:"start_date" json:"startDate"`
	EndDate     time.Time `db:"end_date" json:"endDate"`
	CreatedBy   string    `db:"created_by" json:"createdBy"`
	Description string    `db:"description" json:"description"`
}

func (q *Queries) CreateProgram(ctx context.Context, arg CreateProgramParams) error {
	_, err := q.db.Exec(ctx, createProgram,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.CreatedBy,
		arg.Description,
	)
	return err
}

const deleteProgram = `-- name: DeleteProgram :exec
DELETE FROM programs WHERE id = $1
`

func (q *Queries) DeleteProgram(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProgram, id)
	return err
}

const getProgramByClassId = `-- name: GetProgramByClassId :one
SELECT programs.id, programs.name, programs.start_date, programs.end_date, programs.created_by, programs.updated_by, description, programs.created_at, programs.updated_at, c.id, code, subject_id, program_id, password, c.name, link, c.start_date, c.end_date, status, type, c.created_by, c.created_at, c.updated_at, c.updated_by FROM programs
JOIN classes c ON programs.id = c.program_id
WHERE c.id = $1
`

type GetProgramByClassIdRow struct {
	ID          uuid.UUID  `db:"id" json:"id"`
	Name        string     `db:"name" json:"name"`
	StartDate   time.Time  `db:"start_date" json:"startDate"`
	EndDate     time.Time  `db:"end_date" json:"endDate"`
	CreatedBy   string     `db:"created_by" json:"createdBy"`
	UpdatedBy   *string    `db:"updated_by" json:"updatedBy"`
	Description string     `db:"description" json:"description"`
	CreatedAt   time.Time  `db:"created_at" json:"createdAt"`
	UpdatedAt   *time.Time `db:"updated_at" json:"updatedAt"`
	ID_2        uuid.UUID  `db:"id_2" json:"id2"`
	Code        string     `db:"code" json:"code"`
	SubjectID   uuid.UUID  `db:"subject_id" json:"subjectId"`
	ProgramID   uuid.UUID  `db:"program_id" json:"programId"`
	Password    string     `db:"password" json:"password"`
	Name_2      string     `db:"name_2" json:"name2"`
	Link        *string    `db:"link" json:"link"`
	StartDate_2 *time.Time `db:"start_date_2" json:"startDate2"`
	EndDate_2   *time.Time `db:"end_date_2" json:"endDate2"`
	Status      int16      `db:"status" json:"status"`
	Type        int16      `db:"type" json:"type"`
	CreatedBy_2 string     `db:"created_by_2" json:"createdBy2"`
	CreatedAt_2 time.Time  `db:"created_at_2" json:"createdAt2"`
	UpdatedAt_2 *time.Time `db:"updated_at_2" json:"updatedAt2"`
	UpdatedBy_2 *string    `db:"updated_by_2" json:"updatedBy2"`
}

func (q *Queries) GetProgramByClassId(ctx context.Context, classID uuid.UUID) (GetProgramByClassIdRow, error) {
	row := q.db.QueryRow(ctx, getProgramByClassId, classID)
	var i GetProgramByClassIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Code,
		&i.SubjectID,
		&i.ProgramID,
		&i.Password,
		&i.Name_2,
		&i.Link,
		&i.StartDate_2,
		&i.EndDate_2,
		&i.Status,
		&i.Type,
		&i.CreatedBy_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.UpdatedBy_2,
	)
	return i, err
}

const getProgramById = `-- name: GetProgramById :one
SELECT id, name, start_date, end_date, created_by, updated_by, description, created_at, updated_at FROM programs WHERE id = $1
`

func (q *Queries) GetProgramById(ctx context.Context, id uuid.UUID) (Program, error) {
	row := q.db.QueryRow(ctx, getProgramById, id)
	var i Program
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProgram = `-- name: UpdateProgram :exec
UPDATE programs
SET name = $1,
    start_date = $2,
    end_date = $3,
    updated_by = $4,
    description = $5,
    updated_at = now()
WHERE id = $6
`

type UpdateProgramParams struct {
	Name        string    `db:"name" json:"name"`
	StartDate   time.Time `db:"start_date" json:"startDate"`
	EndDate     time.Time `db:"end_date" json:"endDate"`
	UpdatedBy   *string   `db:"updated_by" json:"updatedBy"`
	Description string    `db:"description" json:"description"`
	ID          uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateProgram(ctx context.Context, arg UpdateProgramParams) error {
	_, err := q.db.Exec(ctx, updateProgram,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.UpdatedBy,
		arg.Description,
		arg.ID,
	)
	return err
}
