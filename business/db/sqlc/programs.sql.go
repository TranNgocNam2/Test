// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: programs.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProgram = `-- name: CreateProgram :exec
INSERT INTO programs (id, name, start_date, end_date, created_by, description)
VALUES ($1, $2, $3, $4,
        $5, $6)
`

type CreateProgramParams struct {
	ID          uuid.UUID `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	StartDate   time.Time `db:"start_date" json:"startDate"`
	EndDate     time.Time `db:"end_date" json:"endDate"`
	CreatedBy   string    `db:"created_by" json:"createdBy"`
	Description string    `db:"description" json:"description"`
}

func (q *Queries) CreateProgram(ctx context.Context, arg CreateProgramParams) error {
	_, err := q.db.Exec(ctx, createProgram,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.CreatedBy,
		arg.Description,
	)
	return err
}

const deleteProgram = `-- name: DeleteProgram :exec
DELETE FROM programs WHERE id = $1
`

func (q *Queries) DeleteProgram(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProgram, id)
	return err
}

const getProgramByClassId = `-- name: GetProgramByClassId :one
SELECT p.id, p.name, p.start_date, p.end_date, p.created_by, p.updated_by, p.description, p.created_at, p.updated_at FROM programs p
JOIN classes c ON p.id = c.program_id
WHERE c.id = $1
`

func (q *Queries) GetProgramByClassId(ctx context.Context, classID uuid.UUID) (Program, error) {
	row := q.db.QueryRow(ctx, getProgramByClassId, classID)
	var i Program
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProgramById = `-- name: GetProgramById :one
SELECT id, name, start_date, end_date, created_by, updated_by, description, created_at, updated_at FROM programs WHERE id = $1
`

func (q *Queries) GetProgramById(ctx context.Context, id uuid.UUID) (Program, error) {
	row := q.db.QueryRow(ctx, getProgramById, id)
	var i Program
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProgram = `-- name: UpdateProgram :exec
UPDATE programs
SET name = $1,
    start_date = $2,
    end_date = $3,
    updated_by = $4,
    description = $5,
    updated_at = now()
WHERE id = $6
`

type UpdateProgramParams struct {
	Name        string    `db:"name" json:"name"`
	StartDate   time.Time `db:"start_date" json:"startDate"`
	EndDate     time.Time `db:"end_date" json:"endDate"`
	UpdatedBy   *string   `db:"updated_by" json:"updatedBy"`
	Description string    `db:"description" json:"description"`
	ID          uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateProgram(ctx context.Context, arg UpdateProgramParams) error {
	_, err := q.db.Exec(ctx, updateProgram,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.UpdatedBy,
		arg.Description,
		arg.ID,
	)
	return err
}
