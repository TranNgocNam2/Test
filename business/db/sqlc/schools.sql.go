// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schools.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSchool = `-- name: CreateSchool :exec
INSERT INTO schools (id, name, address, district_id)
VALUES ($1::uuid, $2, $3, $4::integer)
`

type CreateSchoolParams struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	Address    string    `json:"address"`
	DistrictID int32     `json:"districtId"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) error {
	_, err := q.db.ExecContext(ctx, createSchool,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.DistrictID,
	)
	return err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM schools
WHERE id = $1::uuid
`

func (q *Queries) DeleteSchool(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, id)
	return err
}

const getSchoolByID = `-- name: GetSchoolByID :one
SELECT id, name, address, district_id FROM schools
WHERE id = $1::uuid
`

func (q *Queries) GetSchoolByID(ctx context.Context, id uuid.UUID) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByID, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.DistrictID,
	)
	return i, err
}
