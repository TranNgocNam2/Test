// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schools.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSchool = `-- name: CreateSchool :exec
INSERT INTO schools (id, name, address, district_id)
VALUES ($1::uuid, $2, $3, $4::integer)
`

type CreateSchoolParams struct {
	ID         uuid.UUID `db:"id" json:"id"`
	Name       string    `db:"name" json:"name"`
	Address    string    `db:"address" json:"address"`
	DistrictID int32     `db:"district_id" json:"districtId"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) error {
	_, err := q.db.ExecContext(ctx, createSchool,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.DistrictID,
	)
	return err
}

const deleteSchool = `-- name: DeleteSchool :exec
UPDATE schools
SET is_deleted = true
WHERE id = $1::uuid
`

func (q *Queries) DeleteSchool(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, id)
	return err
}

const getSchoolByID = `-- name: GetSchoolByID :one
SELECT id, name, address, district_id, is_deleted FROM schools
WHERE id = $1::uuid AND is_deleted = false
`

func (q *Queries) GetSchoolByID(ctx context.Context, id uuid.UUID) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByID, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.DistrictID,
		&i.IsDeleted,
	)
	return i, err
}

const getSchoolsByDistrictID = `-- name: GetSchoolsByDistrictID :many
SELECT id, name, address, district_id, is_deleted FROM schools
WHERE district_id = $1::integer
AND is_deleted = false
`

func (q *Queries) GetSchoolsByDistrictID(ctx context.Context, districtID int32) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getSchoolsByDistrictID, districtID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []School
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.DistrictID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchool = `-- name: UpdateSchool :exec
UPDATE schools
SET name = $1, address = $2, district_id = $3::integer
WHERE id = $4::uuid
`

type UpdateSchoolParams struct {
	Name       string    `db:"name" json:"name"`
	Address    string    `db:"address" json:"address"`
	DistrictID int32     `db:"district_id" json:"districtId"`
	ID         uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateSchool(ctx context.Context, arg UpdateSchoolParams) error {
	_, err := q.db.ExecContext(ctx, updateSchool,
		arg.Name,
		arg.Address,
		arg.DistrictID,
		arg.ID,
	)
	return err
}
