// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: specialization_subjects.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const countSubjectsBySpecializationId = `-- name: CountSubjectsBySpecializationId :one
SELECT COUNT(*) FROM specialization_subjects
WHERE specialization_id = $1::uuid
`

func (q *Queries) CountSubjectsBySpecializationId(ctx context.Context, specializationID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubjectsBySpecializationId, specializationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSpecializationSubjects = `-- name: CreateSpecializationSubjects :exec
INSERT INTO specialization_subjects (specialization_id, subject_id, created_by)
SELECT $1::uuid, unnest($2::uuid[]), $3::varchar
`

type CreateSpecializationSubjectsParams struct {
	SpecializationID uuid.UUID   `db:"specialization_id" json:"specializationId"`
	SubjectIds       []uuid.UUID `db:"subject_ids" json:"subjectIds"`
	CreatedBy        string      `db:"created_by" json:"createdBy"`
}

func (q *Queries) CreateSpecializationSubjects(ctx context.Context, arg CreateSpecializationSubjectsParams) error {
	_, err := q.db.Exec(ctx, createSpecializationSubjects, arg.SpecializationID, arg.SubjectIds, arg.CreatedBy)
	return err
}

const deleteSpecializationSubjects = `-- name: DeleteSpecializationSubjects :exec
DELETE FROM specialization_subjects WHERE specialization_id = $1::uuid
`

func (q *Queries) DeleteSpecializationSubjects(ctx context.Context, specializationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpecializationSubjects, specializationID)
	return err
}

const getSubjectIdsBySpecialization = `-- name: GetSubjectIdsBySpecialization :one
SELECT array_agg(subject_id)::uuid[] as subject_ids
FROM specialization_subjects
WHERE specialization_id = $1::uuid
`

func (q *Queries) GetSubjectIdsBySpecialization(ctx context.Context, specializationID uuid.UUID) ([]uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getSubjectIdsBySpecialization, specializationID)
	var subject_ids []uuid.UUID
	err := row.Scan(&subject_ids)
	return subject_ids, err
}

const getSubjectsBySpecialization = `-- name: GetSubjectsBySpecialization :many
SELECT subjects.id, subjects.code, subjects.name, subjects.time_per_session, subjects.min_pass_grade, subjects.min_attendance, subjects.image_link, subjects.status, subjects.description, subjects.created_by, subjects.updated_by, subjects.created_at, subjects.updated_at
FROM specialization_subjects
JOIN subjects ON specialization_subjects.subject_id = subjects.id
WHERE specialization_subjects.specialization_id = $1::uuid
`

func (q *Queries) GetSubjectsBySpecialization(ctx context.Context, specializationID uuid.UUID) ([]Subject, error) {
	rows, err := q.db.Query(ctx, getSubjectsBySpecialization, specializationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.TimePerSession,
			&i.MinPassGrade,
			&i.MinAttendance,
			&i.ImageLink,
			&i.Status,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
