// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: specialization_subjects.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countSubjectsBySpecializationID = `-- name: CountSubjectsBySpecializationID :one
SELECT COUNT(*) FROM specialization_subjects
WHERE specialization_id = $1::uuid
`

func (q *Queries) CountSubjectsBySpecializationID(ctx context.Context, specializationID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubjectsBySpecializationID, specializationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSpecializationSubjects = `-- name: CreateSpecializationSubjects :exec
INSERT INTO specialization_subjects (specialization_id, subject_id, created_by)
SELECT $1::uuid, unnest($2::uuid[]), $3::varchar
`

type CreateSpecializationSubjectsParams struct {
	SpecializationID uuid.UUID   `db:"specialization_id" json:"specializationId"`
	SubjectIds       []uuid.UUID `db:"subject_ids" json:"subjectIds"`
	CreatedBy        string      `db:"created_by" json:"createdBy"`
}

func (q *Queries) CreateSpecializationSubjects(ctx context.Context, arg CreateSpecializationSubjectsParams) error {
	_, err := q.db.Exec(ctx, createSpecializationSubjects, arg.SpecializationID, arg.SubjectIds, arg.CreatedBy)
	return err
}

const deleteSpecializationSubjects = `-- name: DeleteSpecializationSubjects :exec
DELETE FROM specialization_subjects WHERE specialization_id = $1::uuid
`

func (q *Queries) DeleteSpecializationSubjects(ctx context.Context, specializationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpecializationSubjects, specializationID)
	return err
}

const getSubjectsBySpecialization = `-- name: GetSubjectsBySpecialization :many
SELECT subjects.id, subjects.name, subjects.code, subjects.image_link, subjects.created_at, subjects.updated_at
FROM specialization_subjects
JOIN subjects ON specialization_subjects.subject_id = subjects.id
WHERE specialization_subjects.specialization_id = $1::uuid
`

type GetSubjectsBySpecializationRow struct {
	ID        uuid.UUID  `db:"id" json:"id"`
	Name      string     `db:"name" json:"name"`
	Code      string     `db:"code" json:"code"`
	ImageLink *string    `db:"image_link" json:"imageLink"`
	CreatedAt time.Time  `db:"created_at" json:"createdAt"`
	UpdatedAt *time.Time `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) GetSubjectsBySpecialization(ctx context.Context, specializationID uuid.UUID) ([]GetSubjectsBySpecializationRow, error) {
	rows, err := q.db.Query(ctx, getSubjectsBySpecialization, specializationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubjectsBySpecializationRow
	for rows.Next() {
		var i GetSubjectsBySpecializationRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.ImageLink,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
