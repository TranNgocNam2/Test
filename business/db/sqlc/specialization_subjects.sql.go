// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: specialization_subjects.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countSubjectsBySpecializationId = `-- name: CountSubjectsBySpecializationId :one
SELECT COUNT(*) FROM specialization_subjects
WHERE specialization_id = $1::uuid
`

func (q *Queries) CountSubjectsBySpecializationId(ctx context.Context, specializationID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubjectsBySpecializationId, specializationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSpecializationSubject = `-- name: CreateSpecializationSubject :exec
INSERT INTO specialization_subjects (specialization_id, subject_id, index, created_by)
VALUES ($1::uuid, $2::uuid,
        $3, $4::varchar)
`

type CreateSpecializationSubjectParams struct {
	SpecializationID uuid.UUID `db:"specialization_id" json:"specializationId"`
	SubjectID        uuid.UUID `db:"subject_id" json:"subjectId"`
	Index            int16     `db:"index" json:"index"`
	CreatedBy        string    `db:"created_by" json:"createdBy"`
}

func (q *Queries) CreateSpecializationSubject(ctx context.Context, arg CreateSpecializationSubjectParams) error {
	_, err := q.db.Exec(ctx, createSpecializationSubject,
		arg.SpecializationID,
		arg.SubjectID,
		arg.Index,
		arg.CreatedBy,
	)
	return err
}

const deleteSpecializationSubjects = `-- name: DeleteSpecializationSubjects :exec
DELETE FROM specialization_subjects WHERE specialization_id = $1::uuid
`

func (q *Queries) DeleteSpecializationSubjects(ctx context.Context, specializationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpecializationSubjects, specializationID)
	return err
}

const getSubjectIdsBySpecialization = `-- name: GetSubjectIdsBySpecialization :one
SELECT array_agg(subject_id)::uuid[] as subject_ids
FROM specialization_subjects
WHERE specialization_id = $1::uuid
`

func (q *Queries) GetSubjectIdsBySpecialization(ctx context.Context, specializationID uuid.UUID) ([]uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getSubjectIdsBySpecialization, specializationID)
	var subject_ids []uuid.UUID
	err := row.Scan(&subject_ids)
	return subject_ids, err
}

const getSubjectsBySpecialization = `-- name: GetSubjectsBySpecialization :many
SELECT subjects.id, subjects.code, subjects.name, subjects.time_per_session, subjects.min_pass_grade, subjects.min_attendance, subjects.image_link, subjects.status, subjects.description, subjects.created_by, subjects.updated_by, subjects.created_at, subjects.updated_at, specialization_subjects.index
FROM specialization_subjects
JOIN subjects ON specialization_subjects.subject_id = subjects.id
WHERE specialization_subjects.specialization_id = $1::uuid
AND subjects.status = 1 ORDER BY specialization_subjects.index
`

type GetSubjectsBySpecializationRow struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	Code           string             `db:"code" json:"code"`
	Name           string             `db:"name" json:"name"`
	TimePerSession int16              `db:"time_per_session" json:"timePerSession"`
	MinPassGrade   *float32           `db:"min_pass_grade" json:"minPassGrade"`
	MinAttendance  *float32           `db:"min_attendance" json:"minAttendance"`
	ImageLink      *string            `db:"image_link" json:"imageLink"`
	Status         int16              `db:"status" json:"status"`
	Description    *string            `db:"description" json:"description"`
	CreatedBy      string             `db:"created_by" json:"createdBy"`
	UpdatedBy      *string            `db:"updated_by" json:"updatedBy"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
	Index          int16              `db:"index" json:"index"`
}

func (q *Queries) GetSubjectsBySpecialization(ctx context.Context, specializationID uuid.UUID) ([]GetSubjectsBySpecializationRow, error) {
	rows, err := q.db.Query(ctx, getSubjectsBySpecialization, specializationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubjectsBySpecializationRow
	for rows.Next() {
		var i GetSubjectsBySpecializationRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.TimePerSession,
			&i.MinPassGrade,
			&i.MinAttendance,
			&i.ImageLink,
			&i.Status,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Index,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
