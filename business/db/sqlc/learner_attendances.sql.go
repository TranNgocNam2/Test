// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: learner_attendances.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countAttendace = `-- name: CountAttendace :one
SELECT COUNT(*) FROM learner_attendances WHERE class_learner_id = $1
`

func (q *Queries) CountAttendace(ctx context.Context, classLearnerID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAttendace, classLearnerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const generateLearnerAttendance = `-- name: GenerateLearnerAttendance :exec
INSERT INTO learner_attendances(id, class_learner_id, slot_id)
VALUES (uuid_generate_v4(), $1, UNNEST($2::uuid[]))
`

type GenerateLearnerAttendanceParams struct {
	ClassLearnerID uuid.UUID   `db:"class_learner_id" json:"classLearnerId"`
	SlotIds        []uuid.UUID `db:"slot_ids" json:"slotIds"`
}

func (q *Queries) GenerateLearnerAttendance(ctx context.Context, arg GenerateLearnerAttendanceParams) error {
	_, err := q.db.Exec(ctx, generateLearnerAttendance, arg.ClassLearnerID, arg.SlotIds)
	return err
}

const generateLearnersAttendance = `-- name: GenerateLearnersAttendance :exec
INSERT INTO learner_attendances(id, class_learner_id, slot_id)
SELECT
    uuid_generate_v4(),
    class_learner_id,
    slot_id
FROM
    UNNEST($1::uuid[]) AS learner_ids(class_learner_id)
        CROSS JOIN
    UNNEST($2::uuid[]) AS slot_ids(slot_id)
`

type GenerateLearnersAttendanceParams struct {
	ClassLearnerIds []uuid.UUID `db:"class_learner_ids" json:"classLearnerIds"`
	SlotIds         []uuid.UUID `db:"slot_ids" json:"slotIds"`
}

func (q *Queries) GenerateLearnersAttendance(ctx context.Context, arg GenerateLearnersAttendanceParams) error {
	_, err := q.db.Exec(ctx, generateLearnersAttendance, arg.ClassLearnerIds, arg.SlotIds)
	return err
}

const getAttendanceByClassLearner = `-- name: GetAttendanceByClassLearner :many
SELECT id, class_learner_id, slot_id, status FROM learner_attendances
    WHERE class_learner_id = $1::uuid
`

func (q *Queries) GetAttendanceByClassLearner(ctx context.Context, classLearnerID uuid.UUID) ([]LearnerAttendance, error) {
	rows, err := q.db.Query(ctx, getAttendanceByClassLearner, classLearnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LearnerAttendance
	for rows.Next() {
		var i LearnerAttendance
		if err := rows.Scan(
			&i.ID,
			&i.ClassLearnerID,
			&i.SlotID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLearnerAttendanceByClassLearnerAndSlot = `-- name: GetLearnerAttendanceByClassLearnerAndSlot :one
SELECT id, class_learner_id, slot_id, status FROM learner_attendances
    WHERE class_learner_id = $1::uuid
    AND slot_id = $2::uuid
`

type GetLearnerAttendanceByClassLearnerAndSlotParams struct {
	ClassLearnerID uuid.UUID `db:"class_learner_id" json:"classLearnerId"`
	SlotID         uuid.UUID `db:"slot_id" json:"slotId"`
}

func (q *Queries) GetLearnerAttendanceByClassLearnerAndSlot(ctx context.Context, arg GetLearnerAttendanceByClassLearnerAndSlotParams) (LearnerAttendance, error) {
	row := q.db.QueryRow(ctx, getLearnerAttendanceByClassLearnerAndSlot, arg.ClassLearnerID, arg.SlotID)
	var i LearnerAttendance
	err := row.Scan(
		&i.ID,
		&i.ClassLearnerID,
		&i.SlotID,
		&i.Status,
	)
	return i, err
}

const getLearnerAttendanceBySlot = `-- name: GetLearnerAttendanceBySlot :many
SELECT
    u.id, u.full_name, s.id AS school_id, s.name AS school_name, la.status
FROM users u
         JOIN class_learners cl ON u.id = cl.learner_id
         JOIN verification_learners vl ON u.id = vl.learner_id
         JOIN schools s ON s.id = vl.school_id
         JOIN learner_attendances la ON la.class_learner_id = cl.id
WHERE la.slot_id = $1::uuid
`

type GetLearnerAttendanceBySlotRow struct {
	ID         string    `db:"id" json:"id"`
	FullName   *string   `db:"full_name" json:"fullName"`
	SchoolID   uuid.UUID `db:"school_id" json:"schoolId"`
	SchoolName string    `db:"school_name" json:"schoolName"`
	Status     int32     `db:"status" json:"status"`
}

func (q *Queries) GetLearnerAttendanceBySlot(ctx context.Context, slotID uuid.UUID) ([]GetLearnerAttendanceBySlotRow, error) {
	rows, err := q.db.Query(ctx, getLearnerAttendanceBySlot, slotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLearnerAttendanceBySlotRow
	for rows.Next() {
		var i GetLearnerAttendanceBySlotRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.SchoolID,
			&i.SchoolName,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLearnerAttendanceRecords = `-- name: GetLearnerAttendanceRecords :many
SELECT la.id, la.status, s.start_time, s.end_time, s.index
FROM learner_attendances la
         JOIN slots s ON s.id = la.slot_id
         JOIN class_learners cl ON cl.id = la.class_learner_id
WHERE cl.class_id = $1::uuid
  AND cl.learner_id = $2
ORDER BY s.index
`

type GetLearnerAttendanceRecordsParams struct {
	ClassID   uuid.UUID `db:"class_id" json:"classId"`
	LearnerID string    `db:"learner_id" json:"learnerId"`
}

type GetLearnerAttendanceRecordsRow struct {
	ID        uuid.UUID  `db:"id" json:"id"`
	Status    int32      `db:"status" json:"status"`
	StartTime *time.Time `db:"start_time" json:"startTime"`
	EndTime   *time.Time `db:"end_time" json:"endTime"`
	Index     int32      `db:"index" json:"index"`
}

func (q *Queries) GetLearnerAttendanceRecords(ctx context.Context, arg GetLearnerAttendanceRecordsParams) ([]GetLearnerAttendanceRecordsRow, error) {
	rows, err := q.db.Query(ctx, getLearnerAttendanceRecords, arg.ClassID, arg.LearnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLearnerAttendanceRecordsRow
	for rows.Next() {
		var i GetLearnerAttendanceRecordsRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.Index,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const submitLearnerAttendance = `-- name: SubmitLearnerAttendance :exec
UPDATE learner_attendances
SET status = $1
WHERE id = $2::uuid
`

type SubmitLearnerAttendanceParams struct {
	Status int32     `db:"status" json:"status"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) SubmitLearnerAttendance(ctx context.Context, arg SubmitLearnerAttendanceParams) error {
	_, err := q.db.Exec(ctx, submitLearnerAttendance, arg.Status, arg.ID)
	return err
}
