// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: assignments.sql

package sqlc

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const checkAssignmentInClass = `-- name: CheckAssignmentInClass :one
SELECT EXISTS (SELECT 1
FROM assignments WHERE
    class_id = $1::uuid
AND id = $2::uuid)
`

type CheckAssignmentInClassParams struct {
	ClassID uuid.UUID `db:"class_id" json:"classId"`
	ID      uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) CheckAssignmentInClass(ctx context.Context, arg CheckAssignmentInClassParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkAssignmentInClass, arg.ClassID, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteAssignment = `-- name: DeleteAssignment :exec
DELETE FROM assignments WHERE id = $1::uuid
`

func (q *Queries) DeleteAssignment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssignment, id)
	return err
}

const getAssignmentById = `-- name: GetAssignmentById :one
SELECT id, class_id, question, deadline, status, can_overdue, type FROM assignments WHERE id = $1::uuid
`

func (q *Queries) GetAssignmentById(ctx context.Context, id uuid.UUID) (Assignment, error) {
	row := q.db.QueryRow(ctx, getAssignmentById, id)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.Question,
		&i.Deadline,
		&i.Status,
		&i.CanOverdue,
		&i.Type,
	)
	return i, err
}

const getLearnerAssignment = `-- name: GetLearnerAssignment :one
SELECT id, class_learner_id, assignment_id, grade, data, grading_status, submission_status from learner_assignments Where class_learner_id = $1 AND assignment_id = $2
`

type GetLearnerAssignmentParams struct {
	ClassLearnerID uuid.UUID `db:"class_learner_id" json:"classLearnerId"`
	AssignmentID   uuid.UUID `db:"assignment_id" json:"assignmentId"`
}

func (q *Queries) GetLearnerAssignment(ctx context.Context, arg GetLearnerAssignmentParams) (LearnerAssignment, error) {
	row := q.db.QueryRow(ctx, getLearnerAssignment, arg.ClassLearnerID, arg.AssignmentID)
	var i LearnerAssignment
	err := row.Scan(
		&i.ID,
		&i.ClassLearnerID,
		&i.AssignmentID,
		&i.Grade,
		&i.Data,
		&i.GradingStatus,
		&i.SubmissionStatus,
	)
	return i, err
}

const insertAssignment = `-- name: InsertAssignment :one
INSERT INTO assignments (id, classId, question, deadline, status, type, can_overdue)
VALUES ($1::uuid, $2::uuid, $3, $4,
        $5, $6, $7)
RETURNING id
`

type InsertAssignmentParams struct {
	ID         uuid.UUID       `db:"id" json:"id"`
	Classid    uuid.UUID       `db:"classid" json:"classid"`
	Question   json.RawMessage `db:"question" json:"question"`
	Deadline   *time.Time      `db:"deadline" json:"deadline"`
	Status     int16           `db:"status" json:"status"`
	Type       int16           `db:"type" json:"type"`
	CanOverdue *bool           `db:"can_overdue" json:"canOverdue"`
}

func (q *Queries) InsertAssignment(ctx context.Context, arg InsertAssignmentParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertAssignment,
		arg.ID,
		arg.Classid,
		arg.Question,
		arg.Deadline,
		arg.Status,
		arg.Type,
		arg.CanOverdue,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

type InsertLearnerAssignmentParams struct {
	ID               uuid.UUID `db:"id" json:"id"`
	ClassLearnerID   uuid.UUID `db:"class_learner_id" json:"classLearnerId"`
	AssignmentID     uuid.UUID `db:"assignment_id" json:"assignmentId"`
	Grade            float32   `db:"grade" json:"grade"`
	GradingStatus    int16     `db:"grading_status" json:"gradingStatus"`
	SubmissionStatus int16     `db:"submission_status" json:"submissionStatus"`
}

const updateAssignment = `-- name: UpdateAssignment :exec
UPDATE assignments
SET question = $1,
    deadline = $2,
    status = $3,
    type = $4,
    can_overdue = $5
WHERE id = $6::uuid
`

type UpdateAssignmentParams struct {
	Question   json.RawMessage `db:"question" json:"question"`
	Deadline   *time.Time      `db:"deadline" json:"deadline"`
	Status     int16           `db:"status" json:"status"`
	Type       int16           `db:"type" json:"type"`
	CanOverdue *bool           `db:"can_overdue" json:"canOverdue"`
	ID         uuid.UUID       `db:"id" json:"id"`
}

func (q *Queries) UpdateAssignment(ctx context.Context, arg UpdateAssignmentParams) error {
	_, err := q.db.Exec(ctx, updateAssignment,
		arg.Question,
		arg.Deadline,
		arg.Status,
		arg.Type,
		arg.CanOverdue,
		arg.ID,
	)
	return err
}

const updateLearnerAssignment = `-- name: UpdateLearnerAssignment :exec
UPDATE learner_assignments
SET data = $1,
    submission_status = $2
WHERE class_learner_id = $3::uuid
AND assignment_id = $4::uuid
`

type UpdateLearnerAssignmentParams struct {
	Data             []byte    `db:"data" json:"data"`
	SubmissionStatus int16     `db:"submission_status" json:"submissionStatus"`
	ClassLearnerID   uuid.UUID `db:"class_learner_id" json:"classLearnerId"`
	AssignmentID     uuid.UUID `db:"assignment_id" json:"assignmentId"`
}

func (q *Queries) UpdateLearnerAssignment(ctx context.Context, arg UpdateLearnerAssignmentParams) error {
	_, err := q.db.Exec(ctx, updateLearnerAssignment,
		arg.Data,
		arg.SubmissionStatus,
		arg.ClassLearnerID,
		arg.AssignmentID,
	)
	return err
}

const updateLearnerGrade = `-- name: UpdateLearnerGrade :exec
UPDATE learner_assignments
SET grading_status = $1,
    grade = $2
WHERE class_learner_id = $3::uuid
AND assignment_id = $4::uuid
`

type UpdateLearnerGradeParams struct {
	GradingStatus  int16     `db:"grading_status" json:"gradingStatus"`
	Grade          float32   `db:"grade" json:"grade"`
	ClassLearnerID uuid.UUID `db:"class_learner_id" json:"classLearnerId"`
	AssignmentID   uuid.UUID `db:"assignment_id" json:"assignmentId"`
}

func (q *Queries) UpdateLearnerGrade(ctx context.Context, arg UpdateLearnerGradeParams) error {
	_, err := q.db.Exec(ctx, updateLearnerGrade,
		arg.GradingStatus,
		arg.Grade,
		arg.ClassLearnerID,
		arg.AssignmentID,
	)
	return err
}
