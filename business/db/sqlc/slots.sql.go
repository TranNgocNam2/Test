// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: slots.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type CreateSlotsParams struct {
	ID        uuid.UUID  `db:"id" json:"id"`
	SessionID uuid.UUID  `db:"session_id" json:"sessionId"`
	ClassID   uuid.UUID  `db:"class_id" json:"classId"`
	StartTime *time.Time `db:"start_time" json:"startTime"`
	EndTime   *time.Time `db:"end_time" json:"endTime"`
	Index     int32      `db:"index" json:"index"`
}

const getSlotsByClassID = `-- name: GetSlotsByClassID :many
SELECT id, session_id, class_id, start_time, end_time, index, teacher_id FROM slots WHERE class_id = $1
`

func (q *Queries) GetSlotsByClassID(ctx context.Context, classID uuid.UUID) ([]Slot, error) {
	rows, err := q.db.Query(ctx, getSlotsByClassID, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Slot
	for rows.Next() {
		var i Slot
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.ClassID,
			&i.StartTime,
			&i.EndTime,
			&i.Index,
			&i.TeacherID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
