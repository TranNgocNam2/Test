// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: learner_transcripts.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const generateLearnerTranscripts = `-- name: GenerateLearnerTranscripts :exec
INSERT INTO learner_transcripts (id, class_learner_id, transcript_id)
VALUES (uuid_generate_v4(), $1, UNNEST($2::uuid[]))
`

type GenerateLearnerTranscriptsParams struct {
	ClassLearnerID uuid.UUID   `db:"class_learner_id" json:"classLearnerId"`
	TranscriptIds  []uuid.UUID `db:"transcript_ids" json:"transcriptIds"`
}

func (q *Queries) GenerateLearnerTranscripts(ctx context.Context, arg GenerateLearnerTranscriptsParams) error {
	_, err := q.db.Exec(ctx, generateLearnerTranscripts, arg.ClassLearnerID, arg.TranscriptIds)
	return err
}

const generateLearnersTranscripts = `-- name: GenerateLearnersTranscripts :exec
INSERT INTO learner_transcripts(id, class_learner_id, transcript_id)
SELECT
    uuid_generate_v4(),
    class_learner_id,
    transcript_id
FROM
    UNNEST($1::uuid[]) AS learner_ids(class_learner_id)
        CROSS JOIN
    UNNEST($2::uuid[]) AS slot_ids(transcript_id)
`

type GenerateLearnersTranscriptsParams struct {
	ClassLearnerIds []uuid.UUID `db:"class_learner_ids" json:"classLearnerIds"`
	TranscriptIds   []uuid.UUID `db:"transcript_ids" json:"transcriptIds"`
}

func (q *Queries) GenerateLearnersTranscripts(ctx context.Context, arg GenerateLearnersTranscriptsParams) error {
	_, err := q.db.Exec(ctx, generateLearnersTranscripts, arg.ClassLearnerIds, arg.TranscriptIds)
	return err
}

const getLearnerTranscript = `-- name: GetLearnerTranscript :one
SELECT id, class_learner_id, transcript_id, grade, updated_at, updated_by FROM learner_transcripts WHERE class_learner_id = $1 AND transcript_id = $2
`

type GetLearnerTranscriptParams struct {
	ClassLearnerID uuid.UUID `db:"class_learner_id" json:"classLearnerId"`
	TranscriptID   uuid.UUID `db:"transcript_id" json:"transcriptId"`
}

func (q *Queries) GetLearnerTranscript(ctx context.Context, arg GetLearnerTranscriptParams) (LearnerTranscript, error) {
	row := q.db.QueryRow(ctx, getLearnerTranscript, arg.ClassLearnerID, arg.TranscriptID)
	var i LearnerTranscript
	err := row.Scan(
		&i.ID,
		&i.ClassLearnerID,
		&i.TranscriptID,
		&i.Grade,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getLearnerTranscriptByClassLearnerId = `-- name: GetLearnerTranscriptByClassLearnerId :many
SELECT lt.grade, lt.class_learner_id, lt.transcript_id, t.min_grade, t.weight
FROM learner_transcripts lt
JOIN transcripts t ON lt.transcript_id = t.id
WHERE lt.class_learner_id = $1
`

type GetLearnerTranscriptByClassLearnerIdRow struct {
	Grade          *float32  `db:"grade" json:"grade"`
	ClassLearnerID uuid.UUID `db:"class_learner_id" json:"classLearnerId"`
	TranscriptID   uuid.UUID `db:"transcript_id" json:"transcriptId"`
	MinGrade       float64   `db:"min_grade" json:"minGrade"`
	Weight         float64   `db:"weight" json:"weight"`
}

func (q *Queries) GetLearnerTranscriptByClassLearnerId(ctx context.Context, classLearnerID uuid.UUID) ([]GetLearnerTranscriptByClassLearnerIdRow, error) {
	rows, err := q.db.Query(ctx, getLearnerTranscriptByClassLearnerId, classLearnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLearnerTranscriptByClassLearnerIdRow
	for rows.Next() {
		var i GetLearnerTranscriptByClassLearnerIdRow
		if err := rows.Scan(
			&i.Grade,
			&i.ClassLearnerID,
			&i.TranscriptID,
			&i.MinGrade,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLearnerTranscriptGrade = `-- name: UpdateLearnerTranscriptGrade :exec
UPDATE learner_transcripts
SET grade = $1
WHERE id = $2::uuid
`

type UpdateLearnerTranscriptGradeParams struct {
	Grade *float32  `db:"grade" json:"grade"`
	ID    uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateLearnerTranscriptGrade(ctx context.Context, arg UpdateLearnerTranscriptGradeParams) error {
	_, err := q.db.Exec(ctx, updateLearnerTranscriptGrade, arg.Grade, arg.ID)
	return err
}
