// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForInsertMaterial implements pgx.CopyFromSource.
type iteratorForInsertMaterial struct {
	rows                 []InsertMaterialParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertMaterial) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertMaterial) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].SessionID,
		r.rows[0].Index,
		r.rows[0].Type,
		r.rows[0].IsShared,
		r.rows[0].Name,
		r.rows[0].Data,
	}, nil
}

func (r iteratorForInsertMaterial) Err() error {
	return nil
}

func (q *Queries) InsertMaterial(ctx context.Context, arg []InsertMaterialParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"materials"}, []string{"id", "session_id", "index", "type", "is_shared", "name", "data"}, &iteratorForInsertMaterial{rows: arg})
}
