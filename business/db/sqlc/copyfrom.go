// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForCreateSlots implements pgx.CopyFromSource.
type iteratorForCreateSlots struct {
	rows                 []CreateSlotsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSlots) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSlots) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].SessionID,
		r.rows[0].ClassID,
		r.rows[0].StartTime,
		r.rows[0].EndTime,
		r.rows[0].Index,
	}, nil
}

func (r iteratorForCreateSlots) Err() error {
	return nil
}

func (q *Queries) CreateSlots(ctx context.Context, arg []CreateSlotsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"slots"}, []string{"id", "session_id", "class_id", "start_time", "end_time", "index"}, &iteratorForCreateSlots{rows: arg})
}

// iteratorForCreateSubjectCertificate implements pgx.CopyFromSource.
type iteratorForCreateSubjectCertificate struct {
	rows                 []CreateSubjectCertificateParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSubjectCertificate) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSubjectCertificate) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].LearnerID,
		r.rows[0].SubjectID,
		r.rows[0].Name,
		r.rows[0].Status,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateSubjectCertificate) Err() error {
	return nil
}

func (q *Queries) CreateSubjectCertificate(ctx context.Context, arg []CreateSubjectCertificateParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"certificates"}, []string{"id", "learner_id", "subject_id", "name", "status", "created_at"}, &iteratorForCreateSubjectCertificate{rows: arg})
}

// iteratorForInsertLearnerAssignment implements pgx.CopyFromSource.
type iteratorForInsertLearnerAssignment struct {
	rows                 []InsertLearnerAssignmentParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertLearnerAssignment) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertLearnerAssignment) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].ClassLearnerID,
		r.rows[0].AssignmentID,
		r.rows[0].Grade,
		r.rows[0].GradingStatus,
		r.rows[0].SubmissionStatus,
	}, nil
}

func (r iteratorForInsertLearnerAssignment) Err() error {
	return nil
}

func (q *Queries) InsertLearnerAssignment(ctx context.Context, arg []InsertLearnerAssignmentParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"learner_assignments"}, []string{"id", "class_learner_id", "assignment_id", "grade", "grading_status", "submission_status"}, &iteratorForInsertLearnerAssignment{rows: arg})
}

// iteratorForInsertMaterial implements pgx.CopyFromSource.
type iteratorForInsertMaterial struct {
	rows                 []InsertMaterialParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertMaterial) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertMaterial) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].SessionID,
		r.rows[0].Index,
		r.rows[0].Type,
		r.rows[0].IsShared,
		r.rows[0].Name,
		r.rows[0].Data,
	}, nil
}

func (r iteratorForInsertMaterial) Err() error {
	return nil
}

func (q *Queries) InsertMaterial(ctx context.Context, arg []InsertMaterialParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"materials"}, []string{"id", "session_id", "index", "type", "is_shared", "name", "data"}, &iteratorForInsertMaterial{rows: arg})
}

// iteratorForInsertSubjectSkill implements pgx.CopyFromSource.
type iteratorForInsertSubjectSkill struct {
	rows                 []InsertSubjectSkillParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertSubjectSkill) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertSubjectSkill) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].SubjectID,
		r.rows[0].SkillID,
	}, nil
}

func (r iteratorForInsertSubjectSkill) Err() error {
	return nil
}

func (q *Queries) InsertSubjectSkill(ctx context.Context, arg []InsertSubjectSkillParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"subject_skills"}, []string{"id", "subject_id", "skill_id"}, &iteratorForInsertSubjectSkill{rows: arg})
}

// iteratorForInsertTranscripts implements pgx.CopyFromSource.
type iteratorForInsertTranscripts struct {
	rows                 []InsertTranscriptsParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertTranscripts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertTranscripts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].SubjectID,
		r.rows[0].Name,
		r.rows[0].Index,
		r.rows[0].MinGrade,
		r.rows[0].Weight,
	}, nil
}

func (r iteratorForInsertTranscripts) Err() error {
	return nil
}

func (q *Queries) InsertTranscripts(ctx context.Context, arg []InsertTranscriptsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"transcripts"}, []string{"id", "subject_id", "name", "index", "min_grade", "weight"}, &iteratorForInsertTranscripts{rows: arg})
}
