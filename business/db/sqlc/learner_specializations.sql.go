// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: learner_specializations.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const addLearnerToSpecialization = `-- name: AddLearnerToSpecialization :exec
INSERT INTO learner_specializations (id, specialization_id, learner_id)
VALUES (uuid_generate_v4(), $1, $2)
`

type AddLearnerToSpecializationParams struct {
	SpecializationID uuid.UUID `db:"specialization_id" json:"specializationId"`
	LearnerID        string    `db:"learner_id" json:"learnerId"`
}

func (q *Queries) AddLearnerToSpecialization(ctx context.Context, arg AddLearnerToSpecializationParams) error {
	_, err := q.db.Exec(ctx, addLearnerToSpecialization, arg.SpecializationID, arg.LearnerID)
	return err
}

const countLearnerInSpecialization = `-- name: CountLearnerInSpecialization :one
SELECT COUNT(*) FROM learner_specializations
WHERE specialization_id = $1::uuid
AND learner_id = $2
`

type CountLearnerInSpecializationParams struct {
	SpecializationID uuid.UUID `db:"specialization_id" json:"specializationId"`
	LearnerID        string    `db:"learner_id" json:"learnerId"`
}

func (q *Queries) CountLearnerInSpecialization(ctx context.Context, arg CountLearnerInSpecializationParams) (int64, error) {
	row := q.db.QueryRow(ctx, countLearnerInSpecialization, arg.SpecializationID, arg.LearnerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
