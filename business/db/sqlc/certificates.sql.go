// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: certificates.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSpecializationCertificate = `-- name: CreateSpecializationCertificate :exec
INSERT INTO certificates (id, learner_id, specialization_id, name, status, created_at)
VALUES (uuid_generate_v4(), $1, $2,
        $3, $4, now())
`

type CreateSpecializationCertificateParams struct {
	LearnerID        string     `db:"learner_id" json:"learnerId"`
	SpecializationID *uuid.UUID `db:"specialization_id" json:"specializationId"`
	Name             string     `db:"name" json:"name"`
	Status           int32      `db:"status" json:"status"`
}

func (q *Queries) CreateSpecializationCertificate(ctx context.Context, arg CreateSpecializationCertificateParams) error {
	_, err := q.db.Exec(ctx, createSpecializationCertificate,
		arg.LearnerID,
		arg.SpecializationID,
		arg.Name,
		arg.Status,
	)
	return err
}

const createSubjectCertificate = `-- name: CreateSubjectCertificate :exec
INSERT INTO certificates (id, learner_id, subject_id, name, status, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateSubjectCertificateParams struct {
	ID        uuid.UUID  `db:"id" json:"id"`
	LearnerID string     `db:"learner_id" json:"learnerId"`
	SubjectID *uuid.UUID `db:"subject_id" json:"subjectId"`
	Name      string     `db:"name" json:"name"`
	Status    int32      `db:"status" json:"status"`
	CreatedAt time.Time  `db:"created_at" json:"createdAt"`
}

func (q *Queries) CreateSubjectCertificate(ctx context.Context, arg CreateSubjectCertificateParams) error {
	_, err := q.db.Exec(ctx, createSubjectCertificate,
		arg.ID,
		arg.LearnerID,
		arg.SubjectID,
		arg.Name,
		arg.Status,
		arg.CreatedAt,
	)
	return err
}

const getCertificateById = `-- name: GetCertificateById :one
SELECT id, learner_id, specialization_id, subject_id, class_id, name, status, created_at, updated_at, updated_by
FROM certificates
WHERE id = $1
`

func (q *Queries) GetCertificateById(ctx context.Context, id uuid.UUID) (Certificate, error) {
	row := q.db.QueryRow(ctx, getCertificateById, id)
	var i Certificate
	err := row.Scan(
		&i.ID,
		&i.LearnerID,
		&i.SpecializationID,
		&i.SubjectID,
		&i.ClassID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getCertificateByLearnerAndSpecialization = `-- name: GetCertificateByLearnerAndSpecialization :one
SELECT id, learner_id, specialization_id, subject_id, class_id, name, status, created_at, updated_at, updated_by
FROM certificates
WHERE learner_id = $1
AND specialization_id = $2
AND status = $3::int
`

type GetCertificateByLearnerAndSpecializationParams struct {
	LearnerID        string     `db:"learner_id" json:"learnerId"`
	SpecializationID *uuid.UUID `db:"specialization_id" json:"specializationId"`
	Status           int32      `db:"status" json:"status"`
}

func (q *Queries) GetCertificateByLearnerAndSpecialization(ctx context.Context, arg GetCertificateByLearnerAndSpecializationParams) (Certificate, error) {
	row := q.db.QueryRow(ctx, getCertificateByLearnerAndSpecialization, arg.LearnerID, arg.SpecializationID, arg.Status)
	var i Certificate
	err := row.Scan(
		&i.ID,
		&i.LearnerID,
		&i.SpecializationID,
		&i.SubjectID,
		&i.ClassID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getCertificatesByLearnerAndSubjects = `-- name: GetCertificatesByLearnerAndSubjects :many
SELECT c.id, c.learner_id, c.specialization_id, c.subject_id, c.class_id, c.name, c.status, c.created_at, c.updated_at, c.updated_by
FROM certificates c
         JOIN specialization_subjects ss
             ON c.specialization_id = ss.specialization_id
                OR c.subject_id = ss.subject_id
WHERE c.learner_id = $1
AND c.subject_id = ANY($2::uuid[])
AND c.status = $3::int
GROUP BY c.id, c.subject_id
ORDER BY MAX(ss.index)
`

type GetCertificatesByLearnerAndSubjectsParams struct {
	LearnerID  string      `db:"learner_id" json:"learnerId"`
	SubjectIds []uuid.UUID `db:"subject_ids" json:"subjectIds"`
	Status     int32       `db:"status" json:"status"`
}

func (q *Queries) GetCertificatesByLearnerAndSubjects(ctx context.Context, arg GetCertificatesByLearnerAndSubjectsParams) ([]Certificate, error) {
	rows, err := q.db.Query(ctx, getCertificatesByLearnerAndSubjects, arg.LearnerID, arg.SubjectIds, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.ID,
			&i.LearnerID,
			&i.SpecializationID,
			&i.SubjectID,
			&i.ClassID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCertificationsByLearnerAndSubjects = `-- name: GetCertificationsByLearnerAndSubjects :many
SELECT id, learner_id, specialization_id, subject_id, class_id, name, status, created_at, updated_at, updated_by
FROM certificates
WHERE learner_id = $1
AND subject_id = ANY($2::uuid[])
AND status = $3::int
`

type GetCertificationsByLearnerAndSubjectsParams struct {
	LearnerID  string      `db:"learner_id" json:"learnerId"`
	SubjectIds []uuid.UUID `db:"subject_ids" json:"subjectIds"`
	Status     int32       `db:"status" json:"status"`
}

func (q *Queries) GetCertificationsByLearnerAndSubjects(ctx context.Context, arg GetCertificationsByLearnerAndSubjectsParams) ([]Certificate, error) {
	rows, err := q.db.Query(ctx, getCertificationsByLearnerAndSubjects, arg.LearnerID, arg.SubjectIds, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.ID,
			&i.LearnerID,
			&i.SpecializationID,
			&i.SubjectID,
			&i.ClassID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
