// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, full_name, email, phone, gender, profile_photo, school_id, role)
VALUES ($1, $2, $3, $4,
        $5, $6, $7, $8)
`

type CreateUserParams struct {
	ID           string        `db:"id" json:"id"`
	FullName     string        `db:"full_name" json:"fullName"`
	Email        string        `db:"email" json:"email"`
	Phone        string        `db:"phone" json:"phone"`
	Gender       int16         `db:"gender" json:"gender"`
	ProfilePhoto string        `db:"profile_photo" json:"profilePhoto"`
	SchoolID     uuid.NullUUID `db:"school_id" json:"schoolId"`
	Role         int16         `db:"role" json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.ProfilePhoto,
		arg.SchoolID,
		arg.Role,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, phone, gender, profile_photo, status, is_deleted, school_id, role, created_by FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.ProfilePhoto,
		&i.Status,
		&i.IsDeleted,
		&i.SchoolID,
		&i.Role,
		&i.CreatedBy,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, email, phone, gender, profile_photo, status, is_deleted, school_id, role, created_by FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.ProfilePhoto,
		&i.Status,
		&i.IsDeleted,
		&i.SchoolID,
		&i.Role,
		&i.CreatedBy,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, full_name, email, phone, gender, profile_photo, status, is_deleted, school_id, role, created_by FROM users
WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.ProfilePhoto,
		&i.Status,
		&i.IsDeleted,
		&i.SchoolID,
		&i.Role,
		&i.CreatedBy,
	)
	return i, err
}
