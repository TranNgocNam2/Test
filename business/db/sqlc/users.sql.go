// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createLeaner = `-- name: CreateLeaner :exec
INSERT INTO learners (id, school_id)
VALUES ($1, $2)
`

type CreateLeanerParams struct {
	ID       string    `db:"id" json:"id"`
	SchoolID uuid.UUID `db:"school_id" json:"schoolId"`
}

func (q *Queries) CreateLeaner(ctx context.Context, arg CreateLeanerParams) error {
	_, err := q.db.ExecContext(ctx, createLeaner, arg.ID, arg.SchoolID)
	return err
}

const createStaff = `-- name: CreateStaff :exec
INSERT INTO staffs (id, role, created_by)
VALUES ($1, $2, $3)
`

type CreateStaffParams struct {
	ID        string         `db:"id" json:"id"`
	Role      int16          `db:"role" json:"role"`
	CreatedBy sql.NullString `db:"created_by" json:"createdBy"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) error {
	_, err := q.db.ExecContext(ctx, createStaff, arg.ID, arg.Role, arg.CreatedBy)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, full_name, email, phone, gender, profile_photo, auth_role)
VALUES ($1, $2, $3, $4,
        $5, $6, $7)
`

type CreateUserParams struct {
	ID           string `db:"id" json:"id"`
	FullName     string `db:"full_name" json:"fullName"`
	Email        string `db:"email" json:"email"`
	Phone        string `db:"phone" json:"phone"`
	Gender       int16  `db:"gender" json:"gender"`
	ProfilePhoto string `db:"profile_photo" json:"profilePhoto"`
	AuthRole     int16  `db:"auth_role" json:"authRole"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.ProfilePhoto,
		arg.AuthRole,
	)
	return err
}

const getLearnerByID = `-- name: GetLearnerByID :one
SELECT id, role, school_id FROM learners
WHERE id = $1
`

func (q *Queries) GetLearnerByID(ctx context.Context, id string) (Learner, error) {
	row := q.db.QueryRowContext(ctx, getLearnerByID, id)
	var i Learner
	err := row.Scan(&i.ID, &i.Role, &i.SchoolID)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, phone, gender, auth_role, profile_photo, status FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.AuthRole,
		&i.ProfilePhoto,
		&i.Status,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, email, phone, gender, auth_role, profile_photo, status FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.AuthRole,
		&i.ProfilePhoto,
		&i.Status,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, full_name, email, phone, gender, auth_role, profile_photo, status FROM users
WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.AuthRole,
		&i.ProfilePhoto,
		&i.Status,
	)
	return i, err
}
