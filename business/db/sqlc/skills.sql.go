// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: skills.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSkill = `-- name: CreateSkill :exec
INSERT INTO skills (id, name)
VALUES ($1, $2)
`

type CreateSkillParams struct {
	ID   uuid.UUID `db:"id" json:"id"`
	Name string    `db:"name" json:"name"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) error {
	_, err := q.db.Exec(ctx, createSkill, arg.ID, arg.Name)
	return err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM skills WHERE id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSkill, id)
	return err
}

const getSkillById = `-- name: GetSkillById :one
SELECT id, name FROM skills WHERE id = $1
`

func (q *Queries) GetSkillById(ctx context.Context, id uuid.UUID) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkillById, id)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getSkillsByIds = `-- name: GetSkillsByIds :many
SELECT id, name FROM skills WHERE id = ANY($1::uuid[])
`

func (q *Queries) GetSkillsByIds(ctx context.Context, skillIds []uuid.UUID) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getSkillsByIds, skillIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSkillsBySubjectId = `-- name: GetSkillsBySubjectId :many
SELECT s.id, s.name
FROM skills s
JOIN subject_skills ss ON ss.skill_id = s.id
WHERE ss.subject_id = $1
`

func (q *Queries) GetSkillsBySubjectId(ctx context.Context, subjectID uuid.UUID) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getSkillsBySubjectId, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :exec
UPDATE skills
SET name = $1
WHERE id = $2
`

type UpdateSkillParams struct {
	Name string    `db:"name" json:"name"`
	ID   uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) error {
	_, err := q.db.Exec(ctx, updateSkill, arg.Name, arg.ID)
	return err
}
